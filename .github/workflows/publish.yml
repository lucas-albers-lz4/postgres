name: Publish Docker Images

on:
  workflow_dispatch: # Allows manual triggering
  workflow_run:
    workflows: ["GitHub CI"] # Trigger after the CI workflow
    types:
      - completed # Only trigger if CI workflow completed

jobs:
  publish:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }} # Only run if CI succeeded or manually triggered

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies for github-script
        run: npm install adm-zip

      - name: Download Build Strategy
        uses: actions/github-script@v6
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            const matchArtifact = artifacts.data.artifacts.find((artifact) => artifact.name === 'build-strategy');
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            const fs = require('fs');
            const zlib = require('zlib');
            const { Readable } = require('stream');
            const { finished } = require('stream/promises');
            
            // Extract the build-strategy.json from the zip archive
            const AdmZip = require('adm-zip');
            const zip = new AdmZip(Buffer.from(download.data));
            const zipEntries = zip.getEntries();
            const strategyEntry = zipEntries.find(entry => entry.entryName === 'build-strategy.json');
            fs.writeFileSync('build-strategy.json', strategyEntry.getData());

      - name: Read Build Strategy
        id: read_strategy
        run: cat build-strategy.json >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker images
        run: |
          strategy='${{ steps.read_strategy.outputs.strategy }}'
          echo "$strategy" | jq -c '.matrix.include[]' | while read -r job; do
            name=$(echo "$job" | jq -r '.name')
            dir=$(echo "$job" | jq -r '.dir')
            echo "Building and pushing $name from $dir"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --tag ${{ secrets.DOCKER_USERNAME }}/$name \
              $dir
          done
