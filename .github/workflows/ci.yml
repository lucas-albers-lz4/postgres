name: GitHub CI

on:
  pull_request:
  push:
  schedule:
    - cron: 0 0 * * 0
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build for (comma-separated)'
        default: 'linux/amd64,linux/arm64'
        required: false

env:
  REGISTRY: docker.io
  IMAGE_BASE_NAME: ${{ secrets.DOCKERHUB_USERNAME || 'lalberslz4' }}
  IMAGE_REPO_NAME: postgresql

defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

  generate-jobs:
    name: Generate Jobs
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.generate-jobs.outputs.strategy }}
      test_job: ${{ steps.generate-jobs.outputs.test_job }}
    steps:
      - uses: actions/checkout@v4
      - name: Apply Templates
        run: ./apply-templates.sh
      - uses: docker-library/bashbrew@HEAD
      - id: generate-jobs
        name: Generate Jobs
        run: |
          strategy="$("$BASHBREW_SCRIPTS/github-actions/generate.sh")"
          strategy="$(.github/workflows/munge.sh -c <<<"$strategy")"
          echo "strategy=$strategy" >> "$GITHUB_OUTPUT"
          jq . <<<"$strategy" # sanity check / debugging aid
          echo "$strategy" > build-strategy.json # Save strategy to file
          
          # Debug: Show first few jobs to understand structure
          echo "First 3 jobs from strategy:"
          echo "$strategy" | jq -c '.matrix.include[0:3][]'
          
          # Extract one job for testing (prefer latest PostgreSQL with Alpine)
          test_job=$(echo "$strategy" | jq -c '.matrix.include[] | select(.name | test("alpine")) | select(.name | test("17")) | select(.name | test("alpine3.21")) | select(.name | test("force deb build") | not) | limit(1; .)')
          if [ "$test_job" = "" ]; then
            # Fallback to any Alpine job if 17-alpine3.21 not found
            test_job=$(echo "$strategy" | jq -c '.matrix.include[] | select(.name | test("alpine")) | select(.name | test("force deb build") | not) | limit(1; .)')
          fi
          if [ "$test_job" = "" ]; then
            # Final fallback to first job
            test_job=$(echo "$strategy" | jq -c '.matrix.include[0]')
          fi
          echo "test_job=$test_job" >> "$GITHUB_OUTPUT"
          echo "Selected test job: $test_job"
          
      - name: Upload Build Strategy
        uses: actions/upload-artifact@v4
        with:
          name: build-strategy
          path: build-strategy.json

  # First job: Build one test image and verify Docker login
  test-single:
    needs: generate-jobs
    name: Test Build & Docker Login - ${{ fromJson(needs.generate-jobs.outputs.test_job).name }}
    runs-on: ${{ fromJson(needs.generate-jobs.outputs.test_job).os }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Prepare Environment
        run: ${{ fromJson(needs.generate-jobs.outputs.test_job).runs.prepare }}
      - name: Pull Dependencies
        run: ${{ fromJson(needs.generate-jobs.outputs.test_job).runs.pull }}
      - name: Build ${{ fromJson(needs.generate-jobs.outputs.test_job).name }}
        run: ${{ fromJson(needs.generate-jobs.outputs.test_job).runs.build }}
      - name: History ${{ fromJson(needs.generate-jobs.outputs.test_job).name }}
        run: ${{ fromJson(needs.generate-jobs.outputs.test_job).runs.history }}
      - name: Test ${{ fromJson(needs.generate-jobs.outputs.test_job).name }}
        run: ${{ fromJson(needs.generate-jobs.outputs.test_job).runs.test }}
      - name: '"docker images"'
        run: ${{ fromJson(needs.generate-jobs.outputs.test_job).runs.images }}
      
      # Test Docker login to verify credentials work
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Test Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Debug job info
        run: |
          echo "Test job info:"
          echo '${{ needs.generate-jobs.outputs.test_job }}' | jq .
          
          # Extract directory from meta.dockerfiles
          job_info='${{ needs.generate-jobs.outputs.test_job }}'
          directory=$(echo "$job_info" | jq -r '.meta.entries[0].directory')
          echo "Directory: $directory"
          ls -la "$directory" || echo "Directory not found"
          
          # Show built image (but don't push)
          built_image=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -1)
          echo "Built image: $built_image"
          echo "âœ… Test build successful - Docker login verified"

  # Second job: Build and test all remaining images (only if test-single succeeds)
  test-remaining:
    needs: [generate-jobs, test-single]
    runs-on: ${{ matrix.os }}
    # yamllint disable-line rule:line-length
    strategy: 
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-jobs.outputs.strategy).matrix }}
    name: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if should skip
        id: should_skip
        run: |
          test_job='${{ needs.generate-jobs.outputs.test_job }}'
          test_name=$(echo "$test_job" | jq -r '.name')
          current_name='${{ matrix.name }}'
          if [ "$current_name" = "$test_name" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "Skipping $current_name (already tested)"
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
            echo "Processing $current_name"
          fi
      - name: Prepare Environment
        if: steps.should_skip.outputs.skip != 'true'
        run: ${{ matrix.runs.prepare }}
      - name: Pull Dependencies
        if: steps.should_skip.outputs.skip != 'true'
        run: ${{ matrix.runs.pull }}
      - name: Build ${{ matrix.name }}
        if: steps.should_skip.outputs.skip != 'true'
        run: ${{ matrix.runs.build }}
      - name: History ${{ matrix.name }}
        if: steps.should_skip.outputs.skip != 'true'
        run: ${{ matrix.runs.history }}
      - name: Test ${{ matrix.name }}
        if: steps.should_skip.outputs.skip != 'true'
        run: ${{ matrix.runs.test }}
      - name: '"docker images"'
        if: steps.should_skip.outputs.skip != 'true'
        run: ${{ matrix.runs.images }}

  # Third job: Build and push all images (only if all tests pass)
  build-and-push:
    needs: [generate-jobs, test-single, test-remaining]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: success() && github.event_name != 'pull_request'
    strategy:
      matrix:
        include: ${{ fromJson(needs.generate-jobs.outputs.strategy).matrix.include }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/${{ env.IMAGE_REPO_NAME }}
          tags: |
            type=raw,value=${{ matrix.name }}-latest,enable={{is_default_branch}}
            type=raw,value=${{ matrix.name }}
            type=ref,event=branch,prefix=${{ matrix.name }}-
            type=ref,event=tag,prefix=${{ matrix.name }}-
            type=sha,format=short,prefix=${{ matrix.name }}-
      
      - name: Prepare Environment
        run: ${{ matrix.runs.prepare }}
      
      - name: Pull Dependencies
        run: ${{ matrix.runs.pull }}
      
      - name: Build and push image with cache
        run: |
          # Define cache image name - using ghcr.io for better limits
          # Replace 'your-github-username-or-org' with your actual username or organization name
          CACHE_REF=ghcr.io/${{ github.repository }}:buildcache-${{ matrix.name }}
          echo "Cache reference: $CACHE_REF"
 
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --pull \
            --cache-from=type=registry,ref=$CACHE_REF \
            --cache-to=type=registry,ref=$CACHE_REF,mode=max \
            --metadata-action \
            --tag ${{ steps.meta.outputs.tags }} \
            --push \
            ${{ matrix.dir }}
